{"ast":null,"code":"var _jsxFileName = \"/Users/heejin/react-skillup/src/App.js\",\n  _s = $RefreshSig$();\n// src/App.js\n\nimport React from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\"; // import 해주세요.\n\nimport { plus_one, minus_one } from \"./redux/modules/counter\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  //dispatch는 함수다. 사용할 때 괄호를 붙이고 그 안에 action객체를 넣어주면 된다.\n  const dispatch = useDispatch();\n  const number = useSelector(state => state.counter.number);\n  // const counterStore = useSelector((state) => state);\n  // console.log(\"counterStore\", counterStore);\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [number, /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => {\n        //함수형태로 작성된 dispatch()\n        //그 안에 전달된 action객체!!\n        //버튼을 클릭했을 때 dispatch를 통해서 +1이라는 action을 실행하라는 코드.\n        dispatch(plus_one());\n      },\n      children: \"+1\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => {\n        dispatch(minus_one());\n      },\n      children: \"-1\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 16,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"LyzbpkX95vZ/G0rIUQSs18qC0k8=\", false, function () {\n  return [useDispatch, useSelector];\n});\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useSelector","useDispatch","plus_one","minus_one","App","dispatch","number","state","counter"],"sources":["/Users/heejin/react-skillup/src/App.js"],"sourcesContent":["// src/App.js\n\nimport React from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\"; // import 해주세요.\n\nimport { plus_one, minus_one } from \"./redux/modules/counter\";\n\nconst App = () => {\n  //dispatch는 함수다. 사용할 때 괄호를 붙이고 그 안에 action객체를 넣어주면 된다.\n  const dispatch = useDispatch();\n  const number = useSelector((state) => state.counter.number);\n  // const counterStore = useSelector((state) => state);\n  // console.log(\"counterStore\", counterStore);\n\n  return (\n    <div>\n      {number}\n      <button\n        onClick={() => {\n          //함수형태로 작성된 dispatch()\n          //그 안에 전달된 action객체!!\n          //버튼을 클릭했을 때 dispatch를 통해서 +1이라는 action을 실행하라는 코드.\n          dispatch(plus_one());\n        }}\n      >\n        +1\n      </button>\n      <button\n        onClick={() => {\n          dispatch(minus_one());\n        }}\n      >\n        -1\n      </button>\n    </div>\n  );\n};\n\nexport default App;\n"],"mappings":";;AAAA;;AAEA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,WAAW,EAAEC,WAAW,QAAQ,aAAa,CAAC,CAAC;;AAExD,SAASC,QAAQ,EAAEC,SAAS,QAAQ,yBAAyB;AAAC;AAE9D,MAAMC,GAAG,GAAG,MAAM;EAAA;EAChB;EACA,MAAMC,QAAQ,GAAGJ,WAAW,EAAE;EAC9B,MAAMK,MAAM,GAAGN,WAAW,CAAEO,KAAK,IAAKA,KAAK,CAACC,OAAO,CAACF,MAAM,CAAC;EAC3D;EACA;;EAEA,oBACE;IAAA,WACGA,MAAM,eACP;MACE,OAAO,EAAE,MAAM;QACb;QACA;QACA;QACAD,QAAQ,CAACH,QAAQ,EAAE,CAAC;MACtB,CAAE;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QAGK,eACT;MACE,OAAO,EAAE,MAAM;QACbG,QAAQ,CAACF,SAAS,EAAE,CAAC;MACvB,CAAE;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QAGK;EAAA;IAAA;IAAA;IAAA;EAAA,QACL;AAEV,CAAC;AAAC,GA7BIC,GAAG;EAAA,QAEUH,WAAW,EACbD,WAAW;AAAA;AAAA,KAHtBI,GAAG;AA+BT,eAAeA,GAAG;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}